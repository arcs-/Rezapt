$cols: 12;

:root {
	--gutter-x: 0;
	--gutter-y: 0;
}

// Columns
//
@mixin make-grid-columns($columns) {
	// Provide basic `.col-{bp}` classes for equal-width flexbox columns
	@for $i from 1 through $columns {
		.col-#{$i} {
			flex: 0 0 auto;
			width: percentage(math.div($i, $columns));
		}
	}

	// `$columns - 1` because offsetting by the width of an entire row isn't possible
	@for $i from 0 through ($columns - 1) {
		.offset-#{$i} {
			$num: math.div($i, $columns);
			margin-left: if($num == 0, 0, percentage($num));
		}
	}
}

// Row
//
%row {
	display: flex;
	flex-wrap: wrap;
	margin-top: calc(var(--gutter-y) * -1);
	margin-right: calc(var(--gutter-x) / -2);
	margin-left: calc(var(--gutter-x) / -2);

	> * {
		// Prevent columns from becoming too narrow when at smaller grid tiers by
		// always setting `width: 100%;`. This works because we set the width
		// later on to override this initial width.
		flex-shrink: 0;
		width: 100%;
		max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
		padding-right: calc(var(--gutter-x) / 2);
		padding-left: calc(var(--gutter-x) / 2);
		margin-top: var(--gutter-y);
	}
}

// Tailwind
//
@layer utilities {

	// Create classes
	//
	@for $i from 2 through $cols {
		.row-#{$i} {
			@extend %row;
			> {
				@include make-grid-columns($i);
			}
		}
		.col {
			flex: 1 0 0%;
		}
		.col-auto {
			flex-grow: 1;
			flex-basis: 0;
			width: auto;
		}
	}

	// Spacing
	//
	@for $i from 0 through 5 {
		.gx-#{$i} {
			--gutter-x: #{$i}rem;
		}
		.gy-#{$i} {
			--gutter-y: #{$i}rem;
		}
		.g-#{$i} {
			--gutter-x: #{$i}rem;
			--gutter-y: #{$i}rem;
		}
	}

}
